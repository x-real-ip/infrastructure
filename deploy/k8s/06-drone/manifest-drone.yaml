---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-drone-server-data
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 8Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-drone-server-data
    volumeAttributes:
      portal: storage-server-lagg.lan:3260
      iqn: iqn.2005-10.org.freenas.ctl:drone-server-data
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-drone-server-data
  namespace: devops
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-iscsi-manual-csi"
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 8Gi
  volumeName: pv-iscsi-drone-server-data

---
kind: SealedSecret
apiVersion: bitnami.com/v1alpha1
metadata:
  name: drone-server-secret
  namespace: devops
spec:
  encryptedData:
    DRONE_RPC_SECRET: AgDq+9cab6eGpDwohvcqG18BsXmQmoQnTdG+7tUBCY3QU+D7V3B4jYaV3CSvuBMUdXl0r8Y6Ujc9GyUswSAzR7slLhtlqZzeh2Pe9bJbQL86b7ta376hKMMnupxFVfcEYvoszV0BoY4eiKqVOsG2xYuJYw83nJFY8HUq81NlXbnPeXLN2xA55XPQeH2IPuTlpbwF9BdipkLVTRha+ALSvWhZKaMStgXhognn8r+kyEKCaK4J7y+PtwzHKWtZPLcQslw+sorxtUlPkuGnFvnoPeYGW5cm9OSf+Rz75FyE8Xnffg6ScYym2PBGrm7A9/mj5jlOJRRuhRINtt3zSs3R28+NSmlwIMKSyNHthV7Fo/SUKNheBK/K+xkC/5dEWoOeHHC91bjKC4FZr8sKhH8z16bF/72LABASNZ8g1vt7lxCu8OCHsL03xzffSMGX0/zdcwLxvNeUTZzx4QH8SA0T91EjDhcCL6nZDMB8yXdyeQq86IQgq9WLENdy4xdzPOxRLZLlSCHCOvXb6h0aLgmO+coC/WtNtZ9mx+FIhxXX7f+/Srez0boxt5AZz5u1F1Yliez99NaN0njnWBQ41Wi+YCXBW7mHe9Sf4RAlYgGZ/FyVU7Iz5d4otSGDR+qlUx17oJ5cC2shVn9SxlWinpBl3tggWI0wzxY604uYqHfAJV7FcjMGjVGpQsOE+DaYyIO9nXvH99qH0fm1bvUT337OPf0+0ppWmufQ5ORhMO8f3CybiA==
    DRONE_GITHUB_CLIENT_ID: AgCYM7K6a+KrooUE1Zcf0MG8KhnWaZEg5H2+Zfp4MC/TyGxUkco4++fu/iwoIvmanYrCb+vppOfUrgGuTFWNj0n7+uEYk5uiNXsZLUAtoKClmDGrzwrxIeTfC3/sG3r84Kn8u3INXR2xSSevi0sbRAoOTtFn+G4K0B+iyZgND7MsbYupihnjTpzk+gDT5ROQwkL++RQrqcsTXLcNHnR+UJOojDL+HD/KiLbbR8LTwsEtB7JCtc94wj9rj0O6x/KuW1fIy5IL3BLMpviPtad6+uXChLi3/+dSqa6PWUPx1nO0k+8UYK1J8HHU5O3qVgMxxrNlT7HJq839aWb5xzTUk3G/Wi/Rr/vn4h+9+tEvAorwRxurX3yMkO6Yyfa1uJyif4fwT/gDAMMDj+SyzK3jn5FOPddc/aTjv/HHueQrWo9ErKPUOjKW7o/ril7OCXJ9dCfXGG7wTu7mJaBMrJdjOgAcm0OW/hEts6k7s+E5KH32zgkd7HPixIJuYpnNfPHbpeo5v5DPYOpveY5kv/NGRkZwmN5IlwP1buHBsSX4NYhJTcRLRRaXH05BKJtbgbvGzRaVGl5ThxmA/lERrCKWPqX9G3hi6w/fjZlW10CzbDAsDcqiiJJ7c1SybqknGMFH9oFR9+ukOKge2YJTrE1D33xv6cLogriLgZojKUVVES+O85KAzUXWszJNAzzdM6EMwz/IwbHLIvj3P4/LW/73vRef6uqNhw==
    DRONE_GITHUB_CLIENT_SECRET: AgC6ehEAnvaMNs+Uews1hzhGMHMbE7lX+5qX7fADpK8nebUBHq2HWU5uNCY7hV9OEdTQiFDujyGeYyULpI2kdnBZZ495NkxjcOo0VRMP2wxQIpBAzQ64o010a7nHlByOeebSxddqNdzTKBIdCIU5y/QaorQN4ozRdsaxQA9Bu49FRLgPRcxdjaVtwCnbHIPTTqi3mxOTCRDlddpuE9ZFtK36HYe/GKjgI7VRg3wqSIK3dOLzTgDvEpswRI94ofHAdOzqOkyaPaBPyXQNp0z/C8QtfkH8+/ZBk7hvzclPi+ztQ9ays/wYzeWog1sUAlUtvjqFCvHFrkr0K34HVfOqPWRzH/8GWl3quT0cXw4FcfawqiVphe6CXhGdOQAexNXVbsCyoY14/LoyRmgZL6BmTW4ZJCVlbDmtfPfVY95JTI55oWpks6EXfEcuprucd3RWUTikZFkDmizcbNDbJjAG3uTv+lyCft1jGnJDxnVmiEFOJV8WygMP7q6NAdsyNr8beDIK3zNXSWfxybGz4SXcliFnS49sfGffL8G+E523tUD2UC6h6BHa1uMaYrEVWfnxN3AUymhfj9wJAOnIXA5GCcmlyYr84wlStep/KfWqrv+hS6yRJKyPNBsItUpFKtdLl8IG3EqDLhVzTsHBYHbq/AdZFxd5ImXeGzfTKKIBkHHlFd7kMxBZSsf+W34/LH0QRivg9VQqVcgw4qhFH/Qup74KjlsUmnOYLoK/2d/dRo9wdzbEIgucC+qz
  template:
    metadata:
      name: drone-server-secret
      namespace: devops
      labels:
        app: drone-server

---
kind: SealedSecret
apiVersion: bitnami.com/v1alpha1
metadata:
  name: drone-runner-docker-secret
  namespace: devops
spec:
  encryptedData:
    DRONE_RPC_SECRET: AgBe3nUv7MqFe9ag9qVPOMd7uDGGrDRVboW4B2askpSbiNVYn6AmsEI6vHE+H2pjtJOsD+ohTthMz+9+PP0lVxEVTXkmIJm7J34dyQ2bbwOxT0GOm0bE2MDjmgUmMksN7ESLJ7pXFbHaUq53/OUspLHdy5EO/gjXGkprDDLSezSdYxIa7wOzO8bvWV8851GaxeT1ZFz7XL/8UDAY/XmNteEFHprvO/hdBrhyhWt1bQrnSLOQEahCWlAvtwtZuC0yxA5ngxbWq/ko4jiC26oVBaw7y/dzm1YGF42tsPgia7kQQEIWfR9+ZHC4tfyFFPt21SdBdXaodmR6Lw4SSW2XEcvKMSRiltaW5TgiaoRGWZWwThTejQ4NfPFn9yYaOIjyLqxqybiilPJDUJn5NltYGh6vAJRFnBZml2/C6VL8b8JX6giogoxJt+iBdGyrhYLTJu1NAwAUStHRP2p+WT98nAhqddQmcgRuXlqFtMTTB/vNBuLnLDBYDjV/IKo7jgWDJiRkhJB+ob64pDAWw+oN9pYJ47Fx2aQx7jnErKur84kCNMkFG+E1nepofKbMcxDs4+A0gPQ62JJRL3p3EsFjTcrZN6XYPq+327sk2nZyEUdIltYg1x76bN4+rN3bDNKBfOELacyj0LVWEST5X/Vs65ra0uKOxBbDFk2nPBjYubEEOZ1JsF+RxkZnH81FyDuabZEodG7Pkmd7EqH7B6rXf2cVr2zsWAaCUBO9jFe+0XaYMw==
    DRONE_SECRET_PLUGIN_TOKEN: AgBoqEqneK39Nk6GJk6stzL23cJgOR0hMkZ2xErO30sfkc5vM4oVJlsUO+n7d13IYq5uwtOYCufve+WyqBAy/FL7/XUAASDa7CKRVlcNFKy8IiDsD7qDo2R0rF+QkS99d8SKRLc6WrL8WmalENOGBdXMQsIt/GW1D9/uEyQfqFqRr+dpTXAiowwtkUxEOgjtGLeZEYjRhELcbjOiirVOS+BfNA11I2IezMWeO2XKyKfkzC2tBzInbZCZMPKc/fxZiy3LBJTMFMRB6bPd0Xg8Pnlb3rztH9js+Ys+HHAH3ZFOCRKXWFG3jzHrctZfp0Z/9XU7Fh3y5oAmcD8u9Ip10TrHi6fBkRkQN49hbdM5KTwd3XwCPQn+0sfMUQtHE8m8g6W6ubPtAEbww4YAwtPpAY4+Wd2Wid4WxyY4RB2CGfZKVK2MTX/y3oShlto2iasNAOCQG8mCiJIDnGbu6NBx7KAHfckBwqninHgNQuCRLtDgWem69EkkqXmysSfZqdBdSjujfhLIoqEkpk6QdZwqHi4U7W4h4zDfmg5Xfnc2+XPOdzL1rTYElbIn5cMlPRWf5OYfgH7rsFIzDdNHU4EaqrLk0OeJa6Q4d8kBBtv1CGGwyB6wTELp4oFfpZhGWyQA4zEivj8dcw5NNUWL8z9oij0Z2NKmmtY8VWG94JquSdjl1KjsVxH3e12YDDHmEf22sU3imej3joqnKd02D2bSvqXPxjgYfQhTsw/esBRmM0pS8g==
  template:
    metadata:
      name: drone-runner-docker-secret
      namespace: devops
      labels:
        app: drone-runner-docker

---
kind: SealedSecret
apiVersion: bitnami.com/v1alpha1
metadata:
  name: drone-secrets-secret
  namespace: devops
spec:
  encryptedData:
    SECRET_KEY: AgAD/OhJL7TEd0OhAck+M4d+F5Ss6/SLRHQlsIQa1EBR+9AQbQx9qeiNmgq8ccFze8PVUqvVz2MYweB3UdkXCL8HHVbQOzyJXWUg9RrykvNFMJ/oOPABFT4fd6RmsJQDxwgv0z1WX3uhoIdU3O1DmCtQ21gcPgdXpfKo/w8sNTYxQXt7Cb8XbtTwgvgsFsnPS4yq6yDBk27VOMpZ4fLKf4SeNoa7wlAXS9bQWDWktnwB2jd6cdAMwkNfjuEZ8FlU+XGcvuxEkVPvkxHqSkCagNy1hNmX2Xd6QpNUhqftBGtdrRwumzQldDxdB/3iDP7Ujzocs/x5TpcPgLAs/DRcC9pEP6C58eXSOi6lqIojN/KFzm6R/3WrWLrZ2R4YOQlDvaGjBHjH/tPd4t+udxWbwt2dQhCEDdywkdS0klnfl374H7dgXnXk7bETATaVP3uBgATI+4UjnGoO1WFTsoNqmc/sWdcriPeiROHRs9HAKgkCz3T44dO6Uh9LrVujT1Sdg5KGSvlm2lt1vfIu5ie+KYdN/1p9SSdxBnA3osO3zjKrBMeh3ju8XLzBuYexHgzL4gMakOpe3q+xKrCAPOy6rOGrGE5bSOwJkHPdtBP2wkgso3bxMsHfzjp7HuUhvjnWw9+GZnv8WFbCGaZjAXEwgoMJjKPNjvNpx5gwZMNyJJxq/PPHmU9ZQDjUHv8/ft8tzJhpOOZn9sGaReqe4GL+F6AkwkhafCHUMTRad0WmrAVbEA==
  template:
    metadata:
      name: drone-secrets-secret
      namespace: devops
      labels:
        app: drone-secrets

---
kind: SealedSecret
apiVersion: bitnami.com/v1alpha1
metadata:
  name: drone-personal-token
  namespace: devops
spec:
  encryptedData:
    DRONE_PERSONAL_TOKEN: AgAkefUWBGYaC58coQBref25tRmTFOTx6jbik+8OJ2xt4i9bL4e3b/O3NtTXjmFpA0lCYOzhc27vx+H2xeJu2MMLQyXdpZXhFo3g+1JG5mGckKG1L8RW28wYsrBZrhOHEDTQvb0aRf/wPcVwxGKCP/Q1IDf2aG94kR1nE0BmBe7zAhQ8X2oDS21R4F0qKWnlP+MPcJg1yFYuzk5wWySvgXZblq+YFw9R6qmSspnFbGju3iSJHRS1kp8Q70MYK2DFyOW4jG3FwgA6+hKFGRWlS9Fnzk1B8mHhU61QVXBsiTnsDi7wBrrgjzozRK1flhVwh1OwbrQ/JzYT5cCYRIoDDvIQ2Yp6njklRg53ZFgUSFokgWcTpiNRsa3IsAsW0P+8jMoiUY2tRQQl3plQxUK7jhwhHZuTWEQE9fFPnOk61pGOMG3OItQAIzgVcS5kyL9WhpzfitHA8PhcDCT9JWUgn93Al+8mvqqnWtp/slE1HcnK+BPpiycEXfKpcFQinS7yUf/eSVS1rn/qU0nLkXTEiDyCynbgeleoUfN5qi0Ua4Q+WRC4+rpRGJfqelEX6PSSuy/FF9rxcTkHhBt4PykGPUiED9wg5HTxc/IXfS6CS/cbJGzTOBlbaeQMej52cHm9qGUXBq0LiM3PyD8f9iXbB+XZU4ggkb3LyJrS+5G1qr4OVT4+LOeTFFFdL+0Do/StNGSNA4PXnDPzQqVIibXmNzGkTJ3pn6MAn2iP22/KNSkB8Q==
  template:
    metadata:
      labels:
        app: drone
      name: drone-personal-token
      namespace: devops
    type: Opaque

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: drone-server-config
  namespace: devops
data:
  DRONE_SERVER_HOST: "drone.theautomation.nl"
  DRONE_SERVER_PROTO: "https"
  DRONE_USER_FILTER: "theautomation"
  DRONE_TLS_AUTOCERT: "false"
  DRONE_LOGS_TRACE: "true"
  # DRONE_DATABASE_DRIVER=postgres
  # DRONE_DATABASE_DATASOURCE=postgres://root:password@1.2.3.4:5432/postgres?sslmode=disable

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: drone-runner-docker-config
  namespace: devops
  labels:
    app: drone-runner-docker
data:
  DOCKER_HOST: "tcp://localhost:2375"
  DRONE_RPC_HOST: "drone-server-svc.devops.svc.cluster.local:8080"
  DRONE_RPC_PROTO: "http"
  DRONE_RPC_SKIP_VERIFY: "true"
  DRONE_LOGS_TRACE: "true"
  DRONE_DEBUG: "true"
  DRONE_NAMESPACE_DEFAULT: "devops"
  DRONE_SECRET_PLUGIN_ENDPOINT: "http://drone-secrets.devops.svc.cluster.local:3000"

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: drone-secrets-config
  namespace: devops
  labels:
    app: drone-runner-kube
data:
  KUBERNETES_NAMESPACE: "devops"
  DRONE_DEBUG: "true"

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: docker-deamon-json
  namespace: devops
  labels:
    app: drone-runner-kube
data:
  daemon.json: |
    {
      "insecure-registries": ["harbor-registry.devops.svc.cluster.local:5000"]
    }

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: drone-server
  namespace: devops
  labels:
    app: drone-server

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: drone-runner-docker
  namespace: devops
  labels:
    app: drone-runner-docker

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: drone-secrets
  namespace: devops
  labels:
    app: drone-secrets

---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: drone-secrets
  namespace: devops
  labels:
    app: drone-secrets
rules:
  - apiGroups:
      - ""
    resources:
      - secrets
    verbs:
      - get
      - watch

---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: drone-secrets
  namespace: devops
  labels:
    app: drone-secrets
subjects:
  - kind: ServiceAccount
    name: drone-secrets
    namespace: devops
roleRef:
  kind: Role
  name: drone-secrets
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: drone-server
  namespace: devops
  labels:
    app: drone-server
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drone-server
  template:
    metadata:
      labels:
        app: drone-server
    spec:
      automountServiceAccountToken: false
      serviceAccountName: drone-server
      containers:
        - name: drone-server
          image: "drone/drone:2"
          resources: {}
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          env:
            - name: DRONE_PERSONAL_TOKEN
              valueFrom:
                secretKeyRef:
                  name: drone-personal-token
                  key: DRONE_PERSONAL_TOKEN
                  optional: true
            - name: DRONE_USER_CREATE
              value: "username:theautomation,admin:true,token:$(DRONE_PERSONAL_TOKEN)"
          envFrom:
            - configMapRef:
                name: drone-server-config
            - secretRef:
                name: drone-server-secret
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
          volumeMounts:
            - name: drone-server-data
              mountPath: /data
              subPath: ""
      volumes:
        - name: drone-server-data
          persistentVolumeClaim:
            claimName: pvc-iscsi-drone-server-data

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: drone-runner-docker
  namespace: devops
  labels:
    app: drone-runner-docker
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drone-runner-docker
  template:
    metadata:
      labels:
        app: drone-runner-docker
    spec:
      serviceAccountName: drone-runner-docker
      containers:
        - name: drone-runner-docker
          image: "drone/drone-runner-docker:1.8.1"
          resources: {}
          imagePullPolicy: IfNotPresent
          envFrom:
            - configMapRef:
                name: drone-runner-docker-config
            - secretRef:
                name: drone-runner-docker-secret
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2375
            - name: DRONE_RUNNER_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
          ports:
            - name: tcp
              containerPort: 3000
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: tcp
          readinessProbe:
            tcpSocket:
              port: tcp
        - name: dind
          image: "docker:20-dind"
          resources: {}
          imagePullPolicy: IfNotPresent
          command:
            - dockerd
          args:
            - --host
            - tcp://localhost:2375
          securityContext:
            privileged: true
          livenessProbe:
            exec:
              command:
                - docker
                - -H
                - tcp://localhost:2375
                - images
            initialDelaySeconds: 5
            periodSeconds: 5
          readinessProbe:
            exec:
              command:
                - docker
                - -H
                - tcp://localhost:2375
                - images
            initialDelaySeconds: 5
            periodSeconds: 5
          volumeMounts:
            - mountPath: /var/lib/docker
              name: storage
              subPath: docker
            - name: daemon-json
              mountPath: /etc/docker/daemon.json
              subPath: daemon.json
            - name: kubeconfig
              mountPath: /var/lib/.kube/config
              subPath: config
        - name: gc
          image: "drone/gc:1.0.0"
          resources: {}
          imagePullPolicy: IfNotPresent
          env:
            - name: DOCKER_HOST
              value: tcp://localhost:2375
            - name: GC_CACHE
              value: "5gb"
            - name: GC_DEBUG
              value: "false"
            - name: GC_DEBUG_COLOR
              value: "false"
            - name: GC_DEBUG_PRETTY
              value: "false"
            - name: GC_IGNORE_CONTAINERS
              value: ""
            - name: GC_IGNORE_IMAGES
              value: ""
            - name: GC_INTERVAL
              value: "5m"
      volumes:
        - name: daemon-json
          configMap:
            name: docker-deamon-json
        - name: kubeconfig
          secret:
            secretName: kubeconfig
        - emptyDir: {}
          name: storage

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: drone-secrets
  namespace: devops
  labels:
    app: drone-secrets
spec:
  replicas: 1
  selector:
    matchLabels:
      app: drone-secrets
  template:
    metadata:
      labels:
        app: drone-secrets
    spec:
      serviceAccountName: drone-secrets
      containers:
        - name: drone-secrets
          image: drone/kubernetes-secrets:latest
          resources: {}
          ports:
            - containerPort: 3000
              protocol: TCP
          envFrom:
            - configMapRef:
                name: drone-secrets-config
            - secretRef:
                name: drone-secrets-secret

---
kind: Job
apiVersion: batch/v1
metadata:
  name: drone-add-cron
  namespace: devops
  labels:
    app: drone-add-cron
spec:
  ttlSecondsAfterFinished: 100
  template:
    spec:
      restartPolicy: OnFailure
      containers:
        - name: drone-add-cron
          image: "harbor.k8s.lan/k8s/drone-cli:latest"
          imagePullPolicy: Always
          resources: {}
          command: ["/bin/bash", "-c"]
          args:
            [
              "IFS=','; curl -sf -m 5 ${DRONE_SERVER}/healthz | grep 'OK' && sleep 3 || exit 10; \
              for r in ${REPOS}; do command=$(drone cron add --branch ${DEFAULT_BRANCH} ${ORGANIZATION}/${r} schedule-from-job ${SCHEDULE} 2>&1); \
              if grep -q 'UNIQUE' <<<$command; then echo 'Cron for '${r}' has already been set'; elif grep -q 'no such host' <<<$command; \
              then echo 'No connection to host' && sleep 3 && exit 10; else echo 'Added cron for' ${r}; fi; done",
            ]
          env:
            - name: DRONE_TOKEN
              valueFrom:
                secretKeyRef:
                  name: drone-personal-token
                  key: DRONE_PERSONAL_TOKEN
                  optional: false 
            - name: DRONE_SERVER
              value: "http://drone-server-svc.devops.svc.cluster.local:8080"
            - name: ORGANIZATION
              value: "theautomation"
            - name: REPOS
              value: "drone-cli,bitwarden-cli-init,node-red,home-assistant,esphome,protonmail-bridge,shelly-init,ser2net,nextcloud"
            - name: SCHEDULE
              value: "* 0 1 * * 5"
            - name: DEFAULT_BRANCH
              value: "main"
      imagePullSecrets:
        - name: harbor-registry-creds

---
kind: Service
apiVersion: v1
metadata:
  name: drone-server-svc
  namespace: devops
  labels:
    app: drone-server
spec:
  selector:
    app: drone-server
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 80

---
kind: Service
apiVersion: v1
metadata:
  name: drone-runner-docker
  namespace: devops
  labels:
    app: drone-runner-docker
spec:
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: http
  selector:
    app: drone-runner-docker

---
kind: Service
apiVersion: v1
metadata:
  name: drone-secrets
  namespace: devops
  labels:
    app: drone-secrets
spec:
  selector:
    app: drone-secrets
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 3000
      targetPort: 3000

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: drone-server
  namespace: devops
  labels:
    app: drone-server
spec:
  ingressClassName: nginx-public
  rules:
    - host: "drone.theautomation.nl"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: drone-server-svc
                port:
                  number: 8080
  tls:
    - hosts:
        - drone.theautomation.nl
      secretName: tls-wildcard-theautomation-nl
