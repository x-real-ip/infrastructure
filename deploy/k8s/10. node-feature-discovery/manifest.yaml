---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: node-feature-discovery
  namespace: tools
  labels:
    app.kubernetes.io/name: node-feature-discovery

---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: node-feature-discovery-worker
  namespace: tools
  labels:
    app.kubernetes.io/name: node-feature-discovery

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-feature-discovery
  labels:
    app.kubernetes.io/name: node-feature-discovery
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
      - patch
      - update
      - list
  - apiGroups:
      - nfd.k8s-sigs.io
    resources:
      - nodefeaturerules
    verbs:
      - get
      - list
      - watch

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: node-feature-discovery
  labels:
    app.kubernetes.io/name: node-feature-discovery
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: node-feature-discovery
subjects:
  - kind: ServiceAccount
    name: node-feature-discovery
    namespace: tools

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: node-feature-discovery-master
  namespace: tools
  labels:
    app.kubernetes.io/name: node-feature-discovery
    role: master
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: node-feature-discovery
      role: master
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-feature-discovery
        role: master
    spec:
      serviceAccountName: node-feature-discovery
      containers:
        - name: master
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          image: "k8s.gcr.io/nfd/node-feature-discovery:v0.11.1"
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - "/usr/bin/grpc_health_probe"
                - "-addr=:8080"
            initialDelaySeconds: 10
            periodSeconds: 10
          readinessProbe:
            exec:
              command:
                - "/usr/bin/grpc_health_probe"
                - "-addr=:8080"
            initialDelaySeconds: 5
            periodSeconds: 10
            failureThreshold: 10
          ports:
            - containerPort: 8080
              name: grpc
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          command:
            - "nfd-master"
          args:
            - "-featurerules-controller=true"
      affinity:
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/master
                    operator: In
                    values:
                      - ""
              weight: 1
            - preference:
                matchExpressions:
                  - key: node-role.kubernetes.io/control-plane
                    operator: In
                    values:
                      - ""
              weight: 1
      tolerations:
        - effect: NoSchedule
          key: node-role.kubernetes.io/master
          operator: Equal
          value: ""
        - effect: NoSchedule
          key: node-role.kubernetes.io/control-plane
          operator: Equal
          value: ""
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: node-feature-discovery-worker-conf
  namespace: tools
  labels:
    app.kubernetes.io/name: node-feature-discovery
data:
  nfd-worker.conf: |-
    null

---
kind: CustomResourceDefinition
apiVersion: apiextensions.k8s.io/v1
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.7.0
  name: nodefeaturerules.nfd.k8s-sigs.io
spec:
  group: nfd.k8s-sigs.io
  names:
    kind: NodeFeatureRule
    listKind: NodeFeatureRuleList
    plural: nodefeaturerules
    singular: nodefeaturerule
  scope: Cluster
  versions:
    - name: v1alpha1
      schema:
        openAPIV3Schema:
          description:
            NodeFeatureRule resource specifies a configuration for feature-based
            customization of node objects, such as node labeling.
          properties:
            apiVersion:
              description:
                "APIVersion defines the versioned schema of this representation
                of an object. Servers should convert recognized schemas to the latest
                internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources"
              type: string
            kind:
              description:
                "Kind is a string value representing the REST resource this
                object represents. Servers may infer this from the endpoint the client
                submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds"
              type: string
            metadata:
              type: object
            spec:
              description: NodeFeatureRuleSpec describes a NodeFeatureRule.
              properties:
                rules:
                  description: Rules is a list of node customization rules.
                  items:
                    description:
                      Rule defines a rule for node customization such as
                      labeling.
                    properties:
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels to create if the rule matches.
                        type: object
                      labelsTemplate:
                        description:
                          LabelsTemplate specifies a template to expand for
                          dynamically generating multiple labels. Data (after template
                          expansion) must be keys with an optional value (<key>[=<value>])
                          separated by newlines.
                        type: string
                      matchAny:
                        description:
                          MatchAny specifies a list of matchers one of which
                          must match.
                        items:
                          description: MatchAnyElem specifies one sub-matcher of MatchAny.
                          properties:
                            matchFeatures:
                              description:
                                MatchFeatures specifies a set of matcher
                                terms all of which must match.
                              items:
                                description:
                                  FeatureMatcherTerm defines requirements
                                  against one feature set. All requirements (specified
                                  as MatchExpressions) are evaluated against each element
                                  in the feature set.
                                properties:
                                  feature:
                                    type: string
                                  matchExpressions:
                                    additionalProperties:
                                      description:
                                        "MatchExpression specifies an expression
                                        to evaluate against a set of input values. It
                                        contains an operator that is applied when matching
                                        the input and an array of values that the operator
                                        evaluates the input against. \n NB: CreateMatchExpression
                                        or MustCreateMatchExpression() should be used
                                        for     creating new instances. NB: Validate()
                                        must be called if Op or Value fields are modified
                                        or if a new     instance is created from scratch
                                        without using the helper functions."
                                      properties:
                                        op:
                                          description: Op is the operator to be applied.
                                          enum:
                                            - In
                                            - NotIn
                                            - InRegexp
                                            - Exists
                                            - DoesNotExist
                                            - Gt
                                            - Lt
                                            - GtLt
                                            - IsTrue
                                            - IsFalse
                                          type: string
                                        value:
                                          description:
                                            Value is the list of values that
                                            the operand evaluates the input against.
                                            Value should be empty if the operator is
                                            Exists, DoesNotExist, IsTrue or IsFalse.
                                            Value should contain exactly one element
                                            if the operator is Gt or Lt and exactly
                                            two elements if the operator is GtLt. In
                                            other cases Value should contain at least
                                            one element.
                                          items:
                                            type: string
                                          type: array
                                      required:
                                        - op
                                      type: object
                                    description:
                                      MatchExpressionSet contains a set of
                                      MatchExpressions, each of which is evaluated against
                                      a set of input values.
                                    type: object
                                required:
                                  - feature
                                  - matchExpressions
                                type: object
                              type: array
                          required:
                            - matchFeatures
                          type: object
                        type: array
                      matchFeatures:
                        description:
                          MatchFeatures specifies a set of matcher terms
                          all of which must match.
                        items:
                          description:
                            FeatureMatcherTerm defines requirements against
                            one feature set. All requirements (specified as MatchExpressions)
                            are evaluated against each element in the feature set.
                          properties:
                            feature:
                              type: string
                            matchExpressions:
                              additionalProperties:
                                description:
                                  "MatchExpression specifies an expression
                                  to evaluate against a set of input values. It contains
                                  an operator that is applied when matching the input
                                  and an array of values that the operator evaluates
                                  the input against. \n NB: CreateMatchExpression or
                                  MustCreateMatchExpression() should be used for     creating
                                  new instances. NB: Validate() must be called if Op
                                  or Value fields are modified or if a new     instance
                                  is created from scratch without using the helper functions."
                                properties:
                                  op:
                                    description: Op is the operator to be applied.
                                    enum:
                                      - In
                                      - NotIn
                                      - InRegexp
                                      - Exists
                                      - DoesNotExist
                                      - Gt
                                      - Lt
                                      - GtLt
                                      - IsTrue
                                      - IsFalse
                                    type: string
                                  value:
                                    description:
                                      Value is the list of values that the
                                      operand evaluates the input against. Value should
                                      be empty if the operator is Exists, DoesNotExist,
                                      IsTrue or IsFalse. Value should contain exactly
                                      one element if the operator is Gt or Lt and exactly
                                      two elements if the operator is GtLt. In other
                                      cases Value should contain at least one element.
                                    items:
                                      type: string
                                    type: array
                                required:
                                  - op
                                type: object
                              description:
                                MatchExpressionSet contains a set of MatchExpressions,
                                each of which is evaluated against a set of input values.
                              type: object
                          required:
                            - feature
                            - matchExpressions
                          type: object
                        type: array
                      name:
                        description: Name of the rule.
                        type: string
                      vars:
                        additionalProperties:
                          type: string
                        description:
                          Vars is the variables to store if the rule matches.
                          Variables do not directly inflict any changes in the node
                          object. However, they can be referenced from other rules enabling
                          more complex rule hierarchies, without exposing intermediary
                          output values as labels.
                        type: object
                      varsTemplate:
                        description:
                          VarsTemplate specifies a template to expand for
                          dynamically generating multiple variables. Data (after template
                          expansion) must be keys with an optional value (<key>[=<value>])
                          separated by newlines.
                        type: string
                    required:
                      - name
                    type: object
                  type: array
              required:
                - rules
              type: object
          required:
            - spec
          type: object
      served: true
      storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

---
kind: Service
apiVersion: v1
metadata:
  name: node-feature-discovery-master
  namespace: tools
  labels:
    app.kubernetes.io/name: node-feature-discovery
    role: master
spec:
  type: ClusterIP
  ports:
    - port: 8080
      targetPort: grpc
      protocol: TCP
      name: grpc
  selector:
    app.kubernetes.io/name: node-feature-discovery
---
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: node-feature-discovery-worker
  namespace: tools
  labels:
    app.kubernetes.io/name: node-feature-discovery
    role: worker
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: node-feature-discovery
      role: worker
  template:
    metadata:
      labels:
        app.kubernetes.io/name: node-feature-discovery
        role: worker
    spec:
      dnsPolicy: ClusterFirstWithHostNet
      serviceAccountName: node-feature-discovery-worker
      containers:
        - name: worker
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
          image: "k8s.gcr.io/nfd/node-feature-discovery:v0.11.1"
          imagePullPolicy: IfNotPresent
          env:
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
          resources: {}
          command:
            - "nfd-worker"
          args:
            - "--server=node-feature-discovery-master:8080"
          volumeMounts:
            - name: host-boot
              mountPath: "/host-boot"
              readOnly: true
            - name: host-os-release
              mountPath: "/host-etc/os-release"
              readOnly: true
            - name: host-sys
              mountPath: "/host-sys"
              readOnly: true
            - name: host-usr-lib
              mountPath: "/host-usr/lib"
              readOnly: true
            - name: source-d
              mountPath: "/etc/kubernetes/node-feature-discovery/source.d/"
              readOnly: true
            - name: features-d
              mountPath: "/etc/kubernetes/node-feature-discovery/features.d/"
              readOnly: true
            - name: nfd-worker-conf
              mountPath: "/etc/kubernetes/node-feature-discovery"
              readOnly: true
      volumes:
        - name: host-boot
          hostPath:
            path: "/boot"
        - name: host-os-release
          hostPath:
            path: "/etc/os-release"
        - name: host-sys
          hostPath:
            path: "/sys"
        - name: host-usr-lib
          hostPath:
            path: "/usr/lib"
        - name: source-d
          hostPath:
            path: "/etc/kubernetes/node-feature-discovery/source.d/"
        - name: features-d
          hostPath:
            path: "/etc/kubernetes/node-feature-discovery/features.d/"
        - name: nfd-worker-conf
          configMap:
            name: node-feature-discovery-worker-conf
            items:
              - key: nfd-worker.conf
                path: nfd-worker.conf
