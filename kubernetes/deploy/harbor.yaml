---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-harbor-redis
  labels:
    app: harbor-redis
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-harbor-redis
    volumeAttributes:
      portal: storage-server-lagg.lan:3260
      iqn: iqn.2005-10.org.freenas.ctl:harbor-redis
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-harbor-db
  labels:
    app: harbor-database
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 20Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-harbor-db
    volumeAttributes:
      portal: storage-server-lagg.lan:3260
      iqn: iqn.2005-10.org.freenas.ctl:harbor-db
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-harbor-registry
  labels:
    app: harbor-registry
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 100Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-harbor-registry
    volumeAttributes:
      server: storage-server-lagg.lan
      share: /mnt/r10_8tb/k8s/harbor-registry
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-harbor-jobservice
  labels:
    app: harbor-jobservice
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-harbor-jobservice
    volumeAttributes:
      portal: storage-server-lagg.lan:3260
      iqn: iqn.2005-10.org.freenas.ctl:harbor-jobservice
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-harbor-jobservice
  namespace: devops
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-iscsi-manual-csi"
  labels:
    release: harbor
    app: "harbor"
    component: jobservice
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pv-harbor-jobservice

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-harbor-registry
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
    component: registry
  annotations:
    volume.beta.kubernetes.io/storage-class: "freenas-nfs-manual-csi"
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  volumeName: pv-harbor-registry

---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: harbor-database
  namespace: devops
spec:
  encryptedData:
    POSTGRES_PASSWORD: AgAJ2LX0+EeDX5NNKshpWrIrIHm1C8y5TC0NLPmn4nDCKzdr3inyHQDHXVRi88h1t3+X7aF7AMfMFx4d0enFn1PfN3JVa0ODlk64wxmWgw5abB0QKjgAWb+0fNrQuT7CkYi/aK5WQt4R1iQtxhOkz9bLUeqKrhzZlrEDIN7SDjGnNxi1MN5tkQpf+ahQd+4ZyNrQ9npwhfAfoT3COs8xh+fI91dFB4Emad1roeJBEIZhDOurbIKGjqMgxDyOqkuFOgf/xiEzVeX9shzmQOqIeHDkoTLORH/UNu2E4rIzJSnV/6kS2DDJG1qNV84O0ai63949KocMqC45FyoCqw3HRTBFQFWsaj1mI4RLjySVLsGQRHiYnSq7iKiGZMtxgedg3c+2TDu5CWgGN0/9ldk3UvH1G2z5Zh+M1Puf20JfqXXtTbcdfhQ32tAJZlFj9mKhcbvt1tHeMRYGGCMLoXMsKIrnOcuEAr0d0l3KgNVXk3ffmDr4+JefxDLD4cVQkDG56z/nThfOZk1W3kINnE5DajYhBm/p0ndgfkdOsxguWLGgWm/1wyE12O7JtJhcjHPCSJYcJT6vbp6/PSe1SNI55F9y8KJr6NnZ7wdM59y10WYyAy3p6wxc6d6zp+Nt7y/xI2ekPzoFa4xldAHI9nUATzMqfhjcRwf3MIfHMLgXI0pIhIEnojeBeVdkLWW24c8trjx+fJghofbT6kDL5q/YoUi4mETJA+5ujw==
  template:
    metadata:
      labels:
        app: harbor
        release: harbor
      name: harbor-database
      namespace: devops
    type: Opaque

---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: harbor-registry
  namespace: devops
spec:
  encryptedData:
    REGISTRY_HTTP_SECRET: AgBnIqcjpG7wkR7yIf/x8Hbw+M24Mpr5t5kX4OSeGQ1l/6tMzHfN/HvB91SxyAf3hT+y6Ww58KWFb+5lsHwnDEwT9D4Vr41Rj7z7U/9FY3XTA+JkiNhcP5u5UJe8Cq0D475ChAnDoAXfYX5PZup3wnkd3atc25h+nbSvE1HboXrfwqDsGiyTIZmLQw11B5kSkKwNxzVtGHn2Z0NSpTE7TOINLR7QRUVmudt9y92EsikypERro+7hUWdtx+hhMrPQwXbwHotLBwE89r0kIqek1jXPPFZ2pwy6RA5uVjhKCbGk3uXbdQqT4ku5mvBpvDiifcnRRjn1un6rJ0jRr4ClGL4JXnziFrBPryi97LkwABm21ayWBK7ITVZ+MM/veTX5X+H0v75/ePbJY4Fme0fouRBNxgcnqmSjmFc6II01+Lrl9LkwkH6LQe+qK0bLxLE36MMrPBK61LshXWd0iX73khO+2BCL9iUBdDVF+7Wonpo73fhISzY8HoCSVoIOo5g7fHlONa6jeqlnng1+xdJlGKO2EH7CeUgXYcc5lzBvwTTykRBM5H0umghp+3pQHojg9aSJr1MA6CMKAs9i/QNjGEf9xMIUz4ileq0ng+U08fV0d1TVXveCZussuru8hngh+fBGkpSkkERVckuq+3bTN1xcsj4g0/OxiXgtq5mf+dlg40oQWiRDDn/bRpOgEacpmriq87Zk/R5/scFf5J1yWhUh
    REGISTRY_REDIS_PASSWORD: AgBragyA+1kerYQEaKt6108Cu2OZeAFEiqhBM10ql32t0Cp8g42B/Zqa6jWEGG7HCkDm3s+wlaPeCKdxNZo+EpuC+eNwuNdY8YL1neHu8emmA75NiQZ3DGvp5P/R1aCUDy8K1OwSSc/UzqPnQwbloNINWI8z5vLld0A/34ZZI5xSEFknHMYjvlQXJdXV6/d5IvL7JhXxIMnnH3i5V20kghwcCYSn7368I6gUq1UTcS4W2W8twcSgYQawC8lDmVSMl+nkciDhpVbOGkrCiRYbJ+s2RCryGrPLnQIPDqUwVPcFuH6/5nRJ9uxoSG5etwKQTEIUAbh8JL3jlBk3W5pVNW0v0GCIvZ1kBbVU5Y4MfPRJVj/Ug0iM42J7PShw49VQi0lvNFCRdHG/7Ari1vz1Taar3fsXsxJTaaLYiMM7K1zxXHBmx2ZeC0AMIX57Jw8FW5qBd6mADptC9WKNN2t5V/sEHsc3/ALPygZ7GgBpwXvHs+llNsUPI86MC1Jj/zpraJRHbLpSCsFIpviGU/p23iCiNcHG7oTYBjcx6V0E1LY7Kl2RiUfHPMmD29/CPRVPaIz5U2roLbjQrGZms099rn9xLOCGmoTYm+x3+qK5IrmmRIjdrYWJ1O63O6gBISgANbVrOTdDZ9OrivBKDuePPXJ3/6VIJC5ChGOtparbMEP+B8NL7/xnrtJoTgZlNIMQYgI=
  template:
    metadata:
      labels:
        app: harbor
        release: harbor
      name: harbor-registry
      namespace: devops
    type: Opaque

---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: harbor-registry-htpasswd
  namespace: devops
spec:
  encryptedData:
    REGISTRY_HTPASSWD: AgCVh/C6nVCeDGnIpUeQ1qQNdZ5esSr5o0/GWf7uOFtb9454zXrePbyLyOVCVJUDNV48ID7sOEVckKpcRHZQPjwvQ+TLicCEFp0YarCZb4qJNp0eV0sZDdPXJjx+7Li54nJgqHt3UIb5roHOJzzasbh2Eq8rqPzq3ow1fPpbyqHcfdrGr9cEv98J3aG5KAgERocFFYwionxwx/DLFp51Pv0iFZVjp80mf7Zhu1i6iLs4KJeXKZEeOLHGM2hPJe24jFpfFnb6NpB5xBJ05JHauMqlpSNGTC5nj6fDSdYRlKc95jQImO0sJ+PZX8HwhsoEd/Rnttm8fbcD4mqP1E35zvMmGwJdqvVlZ+SX5zJOGM7tDS9GmMWfpiDYnyXNFD/1GZyqS3sEX7br73v8mzwzXdRks+UQ2uNXtcEnLeQ3L//NSBpn1Obvq6uClCtfGVkAkAuoXv3Y1eD7OJRG+PyhXizeimTjX9m1vURXh48ZUubCG/0L+QvpPh+5Ns+PsBskt76evN5+xElt8VMFDgzgb6aT5JnEcQpXy9uY50D9f3aj0bQw1GO434N/yIrpUO2N5iigAf6CyX3GIMHtMRRZGoO5IaRGBEqwmotyboOgFbDnLbRYIIKvIGDy47f/3IlbY9NgN9mqnL38etOsX2iS60Ol+Z8uts73X5m87fb3Rq+P70WLOllEXP9QS9vT/PJwlcUx+wrsUCdqPM0ik1Xm7wbVszYrM/2u3qVUUekAYmd7hC0R6jgy7ZnRwnXAnsSy6PL0VNnrUbkn7ZWb575lu1puGmNYhH4zQnQSwA==
  template:
    metadata:
      labels:
        app: harbor
        release: harbor
      name: harbor-registry-htpasswd
      namespace: devops
    type: Opaque

---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: harbor-jobservice
  namespace: devops
spec:
  encryptedData:
    JOBSERVICE_SECRET: AgDTy8lCCKOHv1BMyGFAM1bVyaFbe+cZCH0pJw/A4DOe4XTAnY1X6GpqkHtBSKEYkg34ReKhofCgKLE426Qns7728KYppo67UysV0UHF6bBwIOp/6w57gF4uoT+AN03tZflGy6gCX0jA/jHDU+CVJRFPYtbLDuqF21f8bKRhFkbd8pSHPAwK4G/C4DZ4SDT/OZaioRKKGl/hGL4xrJN/+5PiGQ2VmPkIqLvo705yKOcwpO2ELKB0slmHiOPG4qc0WfvAEuiFwZ50TlsBhAnGBRC+u9B7XXdfJ1p3GRaL59guEWew7hPK0dZegpk7CPZois3WGasqy1zeJhNlYEXZq62MPbkYFBRZezW8hKr19l/XfrQOZD1hPL6mDjnK1ATPGaBUWrJBCH59/wVc+/Kfz0eKP802Tc8pbRA+RiK8lK9QqFqREYXWXkpzW0xfDmpcpLgi2ktfn4V79zMbqc09d5iKTNJ4W7su1Pb6OnFV8+NcZ6pWHXFo9ebNnm37RdWcYb+azAB/EjUDE5serDf/6TplQsjtk9UT/uLqcVDowu4+wDLteBicVE4Dbs+9YofopJu1NdrvvrqHeDvvegQQgCsr4m4rleTsuneed/yI5e7joAjT4OoWOtnk2sFJS8COEoGJTK7bqDkUNIR2PvzGvnlKbMvRvn3aZXYxMn/ow6r+RfkPL4xzMmtiHs2thoaGMstOHTtMNbVMKanNx+rH252h
    REGISTRY_CREDENTIAL_PASSWORD: AgCu01GMNlWvEBJYLLGPUFZ/RvWYuiemQtRqFnMXrobLS42DDDqcujHMMUXP+sWFpradygcvNY8aFYYuYGsGOvhtR1tFqBQqgLXcCVR42VWW7xLMlfmTMEDNRXg6FEJHqBY+tDspJZIY/qAEHkng8hMeHAam4K5r0MYzi89E/jZs1oTYQ7SixCtxC/KQkxQtMKHd8/klke3e9mbbkoE4ms9fLWQ6Pkp7mrZN/BA3XkxvuD29fuC4MZw27yIb58GLqzVMXGhf+Y5hX0O2KXO6Rr5poDzwlN5rcpsL/G+QRAaG8AupbCdHd8bQGLL8bwCLYIvHym8yRj5N8rTiwlEurReh5ZmsmCeLoSzwfNlvu0vTyggbPRNitGGCXQAlNPrwnNM81Jts/iFw7oUnox6f2uDpiy3f5iDe5p6M6yM4M/JEFghustRBOUGU7oRQJjpXqThj06VgXlDgS00qilEx1bsJiHUERSxjELos+v9Q58STvcvaxhLMXJ92XN3b0w7gH/TIir4jn/LRv2RMmP+SL/Uh2w9Qi0luZnf42YTJ8yuNoTI78z2inl2Yj8HNECqHMyWZrkg9sdrPiCHR4b2utIBuGAJMMOWVZPqQJP6n0Ihs3RUHmv7jb0thCdQ38tVz8pRkFBpWFBaNJPxf6QUx6SjMUVkFhSjiaDUA9MEVO36mulbSMp8I8BczUt4sz8YGB7XgWamB30SHQ0jS/Y9lHnYwlw6D3VvcIc4=
  template:
    metadata:
      labels:
        app: harbor
        release: harbor
      name: harbor-jobservice
      namespace: devops
    type: Opaque

---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  name: harbor-core
  namespace: devops
spec:
  encryptedData:
    CSRF_KEY: AgAgyUmaNMtfPzOdCGKQrg/Jb+rA0hpezCwOlL17n+m8VwqHtiwHst/k0i8FmHaoMRV/EwGgPZG0qdXu+Xr3PDsA1cNEUutfkRlS2FYEApnuw6pV5bwpEc7t5bcxOB5sB0eEyGUKPOaJrezX+DB3jrJK5iorxEmi0sVEkVkNkleMZeN3tQ4y2Yq2atCmcRcTc0CtbyXRxtxeNXZXIsnLAHmNTUdiOiLfeewfh2lf8SXDm8OFHUXeh0ApxLf94L0l+gPBLhxh1CPsE54V3gMbW80KEo3NR8dty0KpRJblMj/Np/l+d5+fov+aThEc4kkTZbpGB2ztU6s0NP37SAfHhYbR72UdGZiXgjjVyOn8w/rAaxCv0pWkjRnRK5UgoZhGLlOlo/okSTgJmR4uqQdkQXVpjxbGQ45Pg3IueJ0pBKeESs5zatIbXMKK84wwYuQI4LIjJX1hvND8JHHkJwP8Mswaao9qQ7UU9U4Nbi2gIexBGxSZkokSKkVuVWhRnvS11dXiyDeoDjL+clxTe8Xu2NR+LdKoiDTvZ8vkSH40jphbQrQ0z4x2c+PVCEJXdLFOOpkf8BjsGOS7Xgb0k7rbmSxdf1jq06n7j63QIWiZrhGg6LC9ffdVmbzT12G8Iom0uzWvqZs7sUgmW51sBUu5/Yfset6mXos8k8/ayFKetcIyUDq87ZCSN+d5jpw0PHKqp/eQBmURDdJ6Zvkih22FDbJl1QkHsfdjJW5Z7Cb1yE0l2w==
    HARBOR_ADMIN_PASSWORD: AgBD6DfGxUubMqKvjmx9xqTInUSringFqwaB57nir+x+rvMlZ1GBV+S9gd2rRjOX5R24wpnJeGNIOJorhqEngLN/wXtT1cTzFT3bfg5iDkS27JfvaOecYI4UioBcpyG47WHSikrHJgagN/uqf5IfVBIzskW8EkPx34dN7x05jN0go69GeRvtKUTCtr89FDTQMFb/NGInSwHwLU7vqSCI75w6CZaR8aheOQEavPhihcrt8s9ERz0ONOBpp9yEn75955COBrDfPR8GtuHfAzFjNIVyo1M542MtRdVtdpkUmC5wRgmkJg+f8HCmSbb9vZF366FJquf27AqH1ECps3hurIBQ6R2kgQszHxH1BXiRL8KKOG2hgaQaoDjuIc6p3+e5swoZHAIK0QW4SOD+n9vVjvIw/xS561XQUskdE2QDPvi+dYsJ3QdvCGWoT3S4mPx4SvHUZnRmFQWvmRYXJbdIU8GbaQEbq/XGffzQMSuriCGrNMIbeEWy8NXFAyUxd8vI332arvbYlmkN+hOnV/VM0lEH8KX+bNg3KzGg7Zx41h88RPcb9w7GZRr70oNbzW3+wiMt+3Fsb7BKx/Iu+JfabNMJPvVw2HxQ9eezJVq/klay3nTyracRb0iRZZ9UPISm8+B8dZc0aJmfEfi5cm0SqeWj2J8oLwVQlqgcfxxWt6uQ4d4fsdZtcLnb9lLP/6dl/30049vL15FyRWIGXivBRw==
    POSTGRESQL_PASSWORD: AgA2jdqXAKW//SHe9uqz/H+4NXqdENnE+RsYDin8d640dnbqmeF3c6mYq3+qnSw3Qc/+1aPRqeKUr8MK3yP/XH7zD+FofH26SnYYJ8FnWnX3K6BdRZWqBv6kFp+brzC9vmyFaIMu7VnXWKvO7yL1Q+J4gAFt5i6n9B8Cq+AlKE58phJcY2fSAfGTWe3JDJM8859/jpHDcNZ3y9P2+clBsjAg8hHwiBcX/093XSFvvcM8Rh0EAk/i/PIyFSkD3AgKJz1Rn2ML9UaK3t48qSsI1YwND9Rk5UkMhIpCBIZNdmpx9R5Jkk5Cy0ArtrEG+sMnVyMEeOAJoLe71toBBKC/CnN+TONKAJ1+/yQ2Htpp52jD16Vw8kB1i0ABb39fpxosk3pmnWkpdXdmNrSuEzt8PHj1TbbLxW/fhzFFnWkZ0nZpwZNnaJfC92lZa/hdPikT3RHfRfSKnzYtkW/p/KAWmuDJ9uyBI2p9VZJIZLrqkDJsIZr3sJh6bJIoXEHA5jp75LRgWGGuo/54eXOwkOsv60fOL1Jc5PgRLpHEOBuxbEEcmTSTophNMrU7SPwpTQeFWAqAeGkZ0Oc8u1ZwKSLBPS7L8nMp1RtcrFPkdVs2qMElclAq5WxLAeIB50G8v7fdSZWZcHSKB9pGvP/lQQreaS331UbF+ZQQGC0AnHI5yKW00t1ZStsKBGuk/4ygELJWkdE7lkqcpWM4mub7M+c5xACUb17oHD9GwQ==
    REGISTRY_CREDENTIAL_PASSWORD: AgAGTtNOLWPwybsMCBugmQHM3HfpLt31+MucbRnIz1UX9Y/ArCLhvgOeJq9W3/VLN2yGbHHeSPOWPfJjHpW6brHW03rZ2eOdPLH69oy6Ov0D+avRVlqvz1Z7YNgGDwl0YFYaiHjatgZ/FP4Io1nbwjBmiV2EVsBYCB234Pcl5nW9abvyhRM6+H2vyIz8ZQ1h4Jc5WOPzI71KzM2RQMBHfuTrOykHTn9NMwNPR79zqw3Z6pS9ZdV3ALAJ7PGiOy6RQn2ZSV9IeNepdgu8ezrAgWVaWv3kdjJmQlFN7Dl2CBo6Hli0LAwjqFD/i4PbgovqN42N7whsxI27Zv+kpffRUkHizlSg3MVyGGr0t5XoKbQAZgljIz4C2uaIzlEjkH8FLmtbtPSy4mpeZ1iNor1T0gVQG/9mztLX6/pe0xBFtKjj6Q3wBq74/cC3ApbTWxrXGooh+SdzWL5llekTby2sbSkNMgTNpJ/A+eDn4kBlunlKTXpycZ6xwYdikkvmr3A8M6QUmwluNkcXts+iU4qOIXkuGqspX9bnsSCYVQOVpQZsco+2xxadlrX+4NXsO48ub5gzQWvGRPaOFHcsZQVOaGqmWjt84465rExBJpyXS2djMVQ7iRyEqcdycD7eF1JtdBIV9r+zP3ioOOff3i6eZNuG44CPsNkrDlWIWSpbUA4rENk7pNnwn1qR39+eQ6bX/ugiHKcr6Npi2VZ09h4Wl9jVh9JbeTLi28M=
    secret: AgBGyYFxGksrVkTDS+k2/8hBODdAd+L+8/0TVXXG34r6Cse2PTG8l/AQSsGMszo4+DdTXA1+bg4ZjhI2aZ4shh2ZQJq3g8dybCwEoiXvm8ykaLBnzWglT2QdrQ6zbcYY3K/viWBWx0I6+JwCDRlb5A55U+kaCLVYPAV6kceitO6zhnkKSh9ovC2ruEvnTkYDJLKikS2btkXW5OEG+BM2+GfKJRqpv1Ktlgm7C8A4BVbusGeZ87lIa7LHymrfoiwvGGWMMpFkST+mM3fluS3oRIulespP0NZvcnS2rH8xp/ryE9RWEkezaBE3aCbE3JyrAgXbEB+e2XF3iJgfDvn51jhi768mX+9iqqtu7Ob1w9Xx0uo3W5reJhhgLex/lGxdH3hPkpCRVM8kb9zvJnW72RBk5VvF0EsNc4xQOv76PtMSt7WXpXK4tJ19cLn8Ev0pc6ZodEF/K0n3uTRXt8mIMzGl78yUBC1bNXIzZox3vlAs3X+rw7gbRbpNfioYFu3HmYEDj07iD/vPY4aHgiaB4BGE+pi79g3V6DcLfPFbP/V3uz0JrXCQJgqxYTjAEA5WOecS6BmsWy22JpRIBJhSTaEimz/NFcWJR2ffFzc35YzStyH0isC9LQDXcnAmnJqAlfrARNWpC6WGWFba67T9APYt+NJmMfj0HuIO4I8BQGO4HHdnJsUSTh0G6umiySJBH+RvC/xVpiJfoIVEkhxJ4kIk
    secretKey: AgBQYoOZg4xLgxQlKW4EO+83tfnMCcLfe+ElZCQuoRvpoYphTRIy7R9ctKz+knf5JNimHb7QbVDiIz1Wy/sdGzMMVGP6bjZV2EEYCyvnuujixKKxAbj0DW/zU4FON9tflurnVcOWuw/2hoxiHk4c62D0znj5RMusS2oKCz0kDopqBLEYUOh5HgfyQpZQkmdvg/QIKDun727TzAoQAAqMH1WD4+TCC08XuH5vPK7HILpfTeakHowm4ZJ+3Mgab+ql8IxOMMeKjG2CfjFjn+sKfyQMf4zzce8JLIQh8i/2XH05F2/cPS/1c11buJw+cjt0qJCxCfi2E9tuDLQ2ucwoquA8agg0Bq4Vkv8S2UZVfDA1jZrcvUpUxKMdhUt+m7996Rf06QY73b4F9jdVXcy95o8Q6pOzyGB/8T93W0/rB1QObgMEajNloClmf0p/DymUqlO2KQobTxcOufMUYYSK1Qc+cYcLQd1R1xBBS1OreodSXJM02wi1QM6dOfWWp8dX7y0c+kC6xKVsDDeIRKILpHSaK9HEKcWAcU3R61VE23VaF7/UWDOfME+3cA4/k3NunIaRICDDDrypq8U1CMVrE8P6+ASaLCY8l8S4aazDrevRUWOk9sUmupDZgXIR0W/zlW1otlJcBm8AfcJRbSRGKjVsQY+l4QvaRJT9+aUyObpRPrZUq+m5IBOJy2HWxuQKcR7jI+5ayyn5J0eNl5MDJtO7
    tls.crt: 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
    tls.key: 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
  template:
    metadata:
      labels:
        app: harbor
        release: harbor
      name: harbor-core
      namespace: devops
    type: Opaque

---
apiVersion: v1
kind: Secret
metadata:
  name: "harbor-registryctl"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
type: Opaque
data: {}

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "harbor-registryctl"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
data: {}

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: harbor-core
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
data:
  app.conf: |+
    appname = Harbor
    runmode = prod
    enablegzip = true
    [prod]
    httpport = 8080
  PORT: "8080"
  DATABASE_TYPE: "postgresql"
  POSTGRESQL_HOST: "harbor-database"
  POSTGRESQL_PORT: "5432"
  POSTGRESQL_USERNAME: "postgres"
  POSTGRESQL_DATABASE: "registry"
  POSTGRESQL_SSLMODE: "disable"
  POSTGRESQL_MAX_IDLE_CONNS: "100"
  POSTGRESQL_MAX_OPEN_CONNS: "900"
  EXT_ENDPOINT: "https://harbor.k8s.lan"
  CORE_URL: "http://harbor-core:80"
  JOBSERVICE_URL: "http://harbor-jobservice"
  REGISTRY_URL: "http://harbor-registry:5000"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  CORE_LOCAL_URL: "http://127.0.0.1:8080"
  WITH_TRIVY: "false"
  TRIVY_ADAPTER_URL: "http://harbor-trivy:8080"
  REGISTRY_STORAGE_PROVIDER_NAME: "filesystem"
  LOG_LEVEL: "info"
  CONFIG_PATH: "/etc/core/app.conf"
  CHART_CACHE_DRIVER: "redis"
  _REDIS_URL_CORE: "redis://harbor-redis:6379/0?idle_timeout_seconds=30"
  _REDIS_URL_REG: "redis://harbor-redis:6379/2?idle_timeout_seconds=30"
  PORTAL_URL: "http://harbor-portal"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "theautomation"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-chartmuseum,harbor-notary-server,harbor-notary-signer,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"
  PERMITTED_REGISTRY_TYPES_FOR_PROXY_CACHE: "docker-hub,harbor,azure-acr,aws-ecr,google-gcr,quay,docker-registry"
  QUOTA_UPDATE_PROVIDER: "db"

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "harbor-registry"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
data:
  config.yml: |+
    version: 0.1
    log:
      level: info
      fields:
        service: registry
    storage:
      filesystem:
        rootdirectory: /storage
      cache:
        layerinfo: redis
      maintenance:
        uploadpurging:
          enabled: true
          age: 168h
          interval: 24h
          dryrun: false
      delete:
        enabled: true
      redirect:
        disable: false
    redis:
      addr: harbor-redis:6379
      db: 2
      readtimeout: 10s
      writetimeout: 10s
      dialtimeout: 10s
      pool:
        maxidle: 100
        maxactive: 500
        idletimeout: 60s
    http:
      addr: :5000
      relativeurls: false
      # set via environment variable
      # secret: placeholder
      debug:
        addr: localhost:5001
    auth:
      htpasswd:
        realm: harbor-registry-basic-realm
        path: /etc/registry/passwd
    validation:
      disabled: true
    compatibility:
      schema1:
        enabled: true
  ctl-config.yml: |+
    ---
    protocol: "http"
    port: 8080
    log_level: info
    registry_config: "/etc/registry/config.yml"

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "harbor-jobservice-env"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
data:
  CORE_URL: "http://harbor-core:80"
  TOKEN_SERVICE_URL: "http://harbor-core:80/service/token"
  REGISTRY_URL: "http://harbor-registry:5000"
  REGISTRY_CONTROLLER_URL: "http://harbor-registry:8080"
  REGISTRY_CREDENTIAL_USERNAME: "theautomation"
  JOBSERVICE_WEBHOOK_JOB_MAX_RETRY: "3"
  JOBSERVICE_WEBHOOK_JOB_HTTP_CLIENT_TIMEOUT: "3"
  HTTP_PROXY: ""
  HTTPS_PROXY: ""
  NO_PROXY: "harbor-core,harbor-jobservice,harbor-database,harbor-registry,harbor-portal,harbor-trivy,harbor-exporter,127.0.0.1,localhost,.local,.internal"

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "harbor-portal"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
data:
  nginx.conf: |+
    worker_processes auto;
    pid /tmp/nginx.pid;
    events {
        worker_connections  1024;
    }
    http {
        client_body_temp_path /tmp/client_body_temp;
        proxy_temp_path /tmp/proxy_temp;
        fastcgi_temp_path /tmp/fastcgi_temp;
        uwsgi_temp_path /tmp/uwsgi_temp;
        scgi_temp_path /tmp/scgi_temp;
        server {
            listen 8080;
            server_name  localhost;
            root   /usr/share/nginx/html;
            index  index.html index.htm;
            include /etc/nginx/mime.types;
            gzip on;
            gzip_min_length 1000;
            gzip_proxied expired no-cache no-store private auth;
            gzip_types text/plain text/css application/json application/javascript application/x-javascript text/xml application/xml application/xml+rss text/javascript;
            location /devcenter-api-2.0 {
                try_files $uri $uri/ /swagger-ui-index.html;
            }
            location / {
                try_files $uri $uri/ /index.html;
            }
            location = /index.html {
                add_header Cache-Control "no-store, no-cache, must-revalidate";
            }
        }
    }



---
kind: ConfigMap
apiVersion: v1
metadata:
  name: "harbor-jobservice"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
data:
  config.yml: |+
    #Server listening port
    protocol: "http"
    port: 8080
    worker_pool:
      workers: 10
      backend: "redis"
      redis_pool:
        redis_url: "redis://harbor-redis:6379/1"
        namespace: "harbor_job_service_namespace"
        idle_timeout_second: 3600
    job_loggers:
      - name: "FILE"
        level: INFO
        settings: # Customized settings of logger
          base_dir: "/var/log/jobs"
        sweeper:
          duration: 14 #days
          settings: # Customized settings of sweeper
            work_dir: "/var/log/jobs"
    metric:
      enabled: false
      path: /metrics
      port: 8001
    #Loggers for the job service
    loggers:
      - name: "STD_OUTPUT"
        level: INFO
    reaper:
      # the max time to wait for a task to finish, if unfinished after max_update_hours, the task will be mark as error, but the task will continue to run, default value is 24
      max_update_hours: 24
      # the max time for execution in running state without new task created
      max_dangling_hours: 168

---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: harbor-redis
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
    component: redis
spec:
  replicas: 1
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
  serviceName: harbor-redis
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: redis
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: redis
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      priorityClassName: system-node-critical
      containers:
        - name: redis
          image: goharbor/redis-photon:v2.9.0
          imagePullPolicy: Always
          livenessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6379
            initialDelaySeconds: 1
            periodSeconds: 10
          volumeMounts:
            - name: data
              mountPath: /var/lib/redis
          resources: {}
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          release: harbor
          app: "harbor"
      spec:
        selector:
          matchLabels:
            app: harbor-redis
        accessModes:
          - "ReadWriteOnce"
        storageClassName: freenas-iscsi-manual-csi
        resources:
          requests:
            storage: "1Gi"

---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: "harbor-database"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
    component: database
spec:
  replicas: 1
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
  serviceName: "harbor-database"
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: database
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: database
    spec:
      securityContext:
        runAsUser: 999
        fsGroup: 999
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      priorityClassName: system-node-critical
      initContainers:
        - name: "data-migrator"
          image: goharbor/harbor-db:v2.9.0
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args:
            [
              "-c",
              "[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/* /var/lib/postgresql/data/pgdata/ || true",
            ]
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
        - name: "data-permissions-ensurer"
          image: goharbor/harbor-db:v2.9.0
          imagePullPolicy: Always
          command: ["/bin/sh"]
          args: ["-c", "chmod -R 700 /var/lib/postgresql/data/pgdata || true"]
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
      containers:
        - name: database
          image: goharbor/harbor-db:v2.9.0
          imagePullPolicy: Always
          livenessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 300
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            exec:
              command:
                - /docker-healthcheck.sh
            initialDelaySeconds: 1
            periodSeconds: 10
            timeoutSeconds: 1
          envFrom:
            - secretRef:
                name: "harbor-database"
          env:
            - name: PGDATA
              value: "/var/lib/postgresql/data/pgdata"
          volumeMounts:
            - name: database-data
              mountPath: /var/lib/postgresql/data
            - name: shm-volume
              mountPath: /dev/shm
          resources: {}
      volumes:
        - name: shm-volume
          emptyDir:
            medium: Memory
            sizeLimit: 512Mi
  volumeClaimTemplates:
    - metadata:
        name: "database-data"
        labels:
          release: harbor
          app: "harbor"
      spec:
        selector:
          matchLabels:
            app: harbor-database
        accessModes:
          - "ReadWriteOnce"
        storageClassName: freenas-iscsi-manual-csi
        resources:
          requests:
            storage: "20Gi"

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "harbor-registry"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
    component: registry
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: registry
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: registry
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
        fsGroupChangePolicy: OnRootMismatch
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      priorityClassName: system-node-critical
      containers:
        - name: registry
          image: goharbor/registry-photon:v2.9.0
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 5000
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 5000
            initialDelaySeconds: 1
            periodSeconds: 10
          args: ["serve", "/etc/registry/config.yml"]
          envFrom:
            - secretRef:
                name: "harbor-registry"
          ports:
            - containerPort: 5000
            - containerPort: 5001
          volumeMounts:
            - name: registry-data
              mountPath: /storage
            - name: registry-htpasswd
              mountPath: /etc/registry/passwd
              subPath: passwd
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
          resources: {}
        - name: registryctl
          image: goharbor/harbor-registryctl:v2.9.0
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /api/health
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/health
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          envFrom:
            - configMapRef:
                name: "harbor-registryctl"
            - secretRef:
                name: "harbor-registry"
            - secretRef:
                name: "harbor-registryctl"
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-jobservice
                  key: JOBSERVICE_SECRET
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: registry-data
              mountPath: /storage
            - name: registry-config
              mountPath: /etc/registry/config.yml
              subPath: config.yml
            - name: registry-config
              mountPath: /etc/registryctl/config.yml
              subPath: ctl-config.yml
          resources: {}
      volumes:
        - name: registry-htpasswd
          secret:
            secretName: harbor-registry-htpasswd
            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
        - name: registry-config
          configMap:
            name: "harbor-registry"
        - name: registry-data
          persistentVolumeClaim:
            claimName: pvc-harbor-registry

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: "harbor-portal"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
    component: portal
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: portal
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: portal
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      priorityClassName: system-node-critical
      containers:
        - name: portal
          image: goharbor/harbor-portal:v2.9.0
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 1
            periodSeconds: 10
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: portal-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
          resources: {}
      volumes:
        - name: portal-config
          configMap:
            name: "harbor-portal"

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: "harbor-jobservice"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
    component: jobservice
spec:
  replicas: 1
  revisionHistoryLimit: 10
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: jobservice
  template:
    metadata:
      labels:
        heritage: Helm
        release: harbor
        chart: harbor
        app: "harbor"
        component: jobservice
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      priorityClassName: system-node-critical
      containers:
        - name: jobservice
          image: goharbor/harbor-jobservice:v2.9.0
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /api/v1/stats
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 300
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/v1/stats
              scheme: HTTP
              port: 8080
            initialDelaySeconds: 20
            periodSeconds: 10
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-core
                  key: secret
          envFrom:
            - configMapRef:
                name: "harbor-jobservice-env"
            - secretRef:
                name: "harbor-jobservice"
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: jobservice-config
              mountPath: /etc/jobservice/config.yml
              subPath: config.yml
            - name: job-logs
              mountPath: /var/log/jobs
          resources: {}
      volumes:
        - name: jobservice-config
          configMap:
            name: "harbor-jobservice"
        - name: job-logs
          persistentVolumeClaim:
            claimName: pvc-harbor-jobservice

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: harbor-core
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
    component: core
spec:
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      release: harbor
      app: "harbor"
      component: core
  template:
    metadata:
      labels:
        release: harbor
        app: "harbor"
        component: core
    spec:
      securityContext:
        runAsUser: 10000
        fsGroup: 10000
      automountServiceAccountToken: false
      terminationGracePeriodSeconds: 120
      priorityClassName: system-node-critical
      containers:
        - name: core
          image: goharbor/harbor-core:v2.9.0
          imagePullPolicy: Always
          startupProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: 8080
            failureThreshold: 360
            initialDelaySeconds: 10
            periodSeconds: 10
          livenessProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: 8080
            failureThreshold: 2
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /api/v2.0/ping
              scheme: HTTP
              port: 8080
            failureThreshold: 2
            periodSeconds: 10
          envFrom:
            - configMapRef:
                name: "harbor-core"
            - secretRef:
                name: "harbor-core"
          env:
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  name: harbor-core
                  key: secret
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  name: "harbor-jobservice"
                  key: JOBSERVICE_SECRET
          ports:
            - containerPort: 8080
          volumeMounts:
            - name: config
              mountPath: /etc/core/app.conf
              subPath: app.conf
            - name: secret-key
              mountPath: /etc/core/key
              subPath: key
            - name: token-service-private-key
              mountPath: /etc/core/private_key.pem
              subPath: tls.key
            - name: ca-download
              mountPath: /etc/core/ca
            - name: psc
              mountPath: /etc/core/token
      volumes:
        - name: config
          configMap:
            name: harbor-core
            items:
              - key: app.conf
                path: app.conf
        - name: secret-key
          secret:
            secretName: harbor-core
            items:
              - key: secretKey
                path: key
        - name: token-service-private-key
          secret:
            secretName: harbor-core
        - name: ca-download
          secret:
        - name: psc
          emptyDir: {}

---
kind: Service
apiVersion: v1
metadata:
  name: harbor-redis
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
spec:
  ports:
    - port: 6379
  selector:
    release: harbor
    app: "harbor"
    component: redis

---
apiVersion: v1
kind: Service
metadata:
  name: "harbor-jobservice"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
spec:
  ports:
    - name: http-jobservice
      port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: jobservice

---
apiVersion: v1
kind: Service
metadata:
  name: "harbor-portal"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
spec:
  ports:
    - port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: portal

---
kind: Service
apiVersion: v1
metadata:
  name: "harbor-registry"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
spec:
  ports:
    - name: http-registry
      port: 5000
    - name: http-controller
      port: 8080
  selector:
    release: harbor
    app: "harbor"
    component: registry

---
kind: Service
apiVersion: v1
metadata:
  name: "harbor-database"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
spec:
  ports:
    - port: 5432
  selector:
    release: harbor
    app: "harbor"
    component: database

---
kind: Service
apiVersion: v1
metadata:
  name: harbor-core
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
spec:
  ports:
    - name: http-web
      port: 80
      targetPort: 8080
  selector:
    release: harbor
    app: "harbor"
    component: core

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: "harbor-ingress"
  namespace: devops
  labels:
    release: harbor
    app: "harbor"
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
spec:
  ingressClassName: nginx-private
  rules:
    - host: "harbor.k8s.lan"
      http:
        paths:
          - path: /api/
            pathType: Prefix
            backend:
              service:
                name: harbor-core
                port:
                  number: 80
          - path: /service/
            pathType: Prefix
            backend:
              service:
                name: harbor-core
                port:
                  number: 80
          - path: /v2/
            pathType: Prefix
            backend:
              service:
                name: harbor-core
                port:
                  number: 80
          - path: /chartrepo/
            pathType: Prefix
            backend:
              service:
                name: harbor-core
                port:
                  number: 80
          - path: /c/
            pathType: Prefix
            backend:
              service:
                name: harbor-core
                port:
                  number: 80
          - path: /
            pathType: Prefix
            backend:
              service:
                name: harbor-portal
                port:
                  number: 80
  tls:
    - hosts:
        - harbor.k8s.lan
      secretName: tls-wildcard-k8s-lan
